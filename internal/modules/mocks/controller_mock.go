// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/modules/controller.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	modules "animakuro/cdn/internal/modules"
	bytes "bytes"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DoesModuleExist mocks base method.
func (m *MockController) DoesModuleExist(module string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesModuleExist", module)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoesModuleExist indicates an expected call of DoesModuleExist.
func (mr *MockControllerMockRecorder) DoesModuleExist(module interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesModuleExist", reflect.TypeOf((*MockController)(nil).DoesModuleExist), module)
}

// Parse mocks base method.
func (m *MockController) Parse(q url.Values, bucketModule string) (modules.ModuleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", q, bucketModule)
	ret0, _ := ret[0].(modules.ModuleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockControllerMockRecorder) Parse(q, bucketModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockController)(nil).Parse), q, bucketModule)
}

// Raw mocks base method.
func (m *MockController) Raw(mm modules.ModuleMap, uuid string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw", mm, uuid)
	ret0, _ := ret[0].(string)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockControllerMockRecorder) Raw(mm, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockController)(nil).Raw), mm, uuid)
}

// UseResolvers mocks base method.
func (m *MockController) UseResolvers(buff *bytes.Buffer, module string, mm modules.ModuleMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseResolvers", buff, module, mm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseResolvers indicates an expected call of UseResolvers.
func (mr *MockControllerMockRecorder) UseResolvers(buff, module, mm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseResolvers", reflect.TypeOf((*MockController)(nil).UseResolvers), buff, module, mm)
}
